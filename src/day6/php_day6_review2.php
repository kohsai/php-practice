<?php
// ☕ PHPコーヒー 第10問（テーマ：関数の戻り値 × 条件分岐）

// 🎯 【穴埋め問題】
// 次の関数は、商品価格が5000円以上かどうかを判定して true/false を返します。
// （　）に入る演算子を選んでください。

// use LDAP\Result;

// function isFreeShipping($price) {
//     return $price >= 5000;
// }


// 🔘 選択肢：
// A. ==  B. >=  C. >  D. <=
// 回答：B

// 🎯 【選択肢】
// 変数 $price に 5200 を渡した場合、isFreeShipping の戻り値は？
// A. true  B. false  C. エラー  D. 何も表示されない
// 回答：D

// ✍️ 【（任意）部分記述】
// 以下のようなメッセージを条件によって出し分けたいとき、
// if文の書き出しの1行目だけ自分で書いてみてください（変数は $price を使用）
//
// - 送料無料：「おめでとうございます！送料無料です！」
// - 有料：「あと○○円で送料無料になります」
//
// 💡 例：// if (〜〜〜) { ← この形で1行だけでOK

// $price = 4800;
// if (isFreeShipping($price)) {
//     echo "おめでとうございます！送料無料です！<br>";
// } else {
//     echo "あと○○円で送料無料になります。<br>";
// }


// ☑️ 採点結果
// 🎯 【穴埋め問題】
// function isFreeShipping($price) {
//     return $price >= 5000;
// }
// KOHの回答：B（>=）

// ✅ 正解です！

// → >= は「以上」を意味し、5000円ちょうどでも true を返します。

// 🎯 【選択問題】
// 変数 $price に 5200 を渡した場合、戻り値は？

// KOHの回答：D（何も表示されない）

// ❌ 不正解です。正解は A（true）

// 🔍 解説：
// isFreeShipping(5200); // → 5200 >= 5000 → true
// 戻り値は true になります。
// KOHが選んだ「D：何も表示されない」は、関数の戻り値を使って表示処理をしていない場合に限ります。
// 今回は「戻り値そのもの」の値を問う問題なので、単純に true が返されるのが正解です。

// ✍️ 【if文の1行目】
// if (isFreeShipping($price)) {
// ✅ 完璧です！ 誤りなし。
// $price を引数にして、戻り値が true かどうかを条件として使えています。

// 🧾 総合評価：
// 項目	評価	コメント
// 理解度	8.5 / 10	基本の判定処理と条件分岐の連携は良好です！
// ミスの傾向	1点のみ	選択肢の意図の取り違え（「表示されるかどうか」ではなく「戻り値は何か」）
// 定着レベル	👍 安定	条件と戻り値の関係はかなり定着しています

// 💡 Venからのワンポイントアドバイス
// 選択肢問題では「何を問われているか」にしっかりフォーカスすることが重要です。
// 特に 戻り値？表示内容？実行結果？ のどれなのかを明確にすると、ケアレスミスを防げます。


// 第二問のところで「echoが無いから「何も表示されない」だろう」と反射的に思ってしまって「D」を選んでいた。問題をよく読む大切さを痛感した。



// ☕ PHPコーヒー 第11問（テーマ：複数引数の関数 × 計算の戻り値）

// 🎯 【穴埋め問題】
// 以下の関数は、2つの数値を受け取り、その合計を返す関数です。
// （　）に適切な内容を補ってください。

// function addNumbers($a, $b)
// {
//     return (　);
// }

// 🔘 選択肢：
// A. $a + $b  B. $a * $b  C. $a - $b  D. $b + $b
// 回答：A

// 🎯 【選択肢】
// 関数 addNumbers に 3 と 7 を渡した場合、戻り値は？
// A. 10  B. 21  C. 4  D. 14
// 回答：A

// ✍️ 【（任意）部分記述】
// 関数 addNumbers を呼び出して、戻り値を使って以下のようなメッセージを表示してください。
// 「合計は ○○ です」
// 出力には <br> を使ってください。
//
// 1行だけ書いてみましょう（変数を使ってもOKです）
// $a = 7;
// $b = 3;

// $result = addNumbers($a, $b);
//     echo "合計は{$result}です<br>";



// ☕ PHPコーヒー 第12問（テーマ：関数の戻り値 × if文での利用）
// 🎯 【選択肢問題】
// 以下の関数 checkLogin は、引数の値が "admin" であれば true、それ以外は false を返します。

// function checkLogin($username)
// {
//     return $username === "admin";
// }

// // 🎯 【問題】
// // 次の if 文の中に適切なコードを入れて、
// // 「ログイン成功」または「ログイン失敗」と表示させてください。

// $username = "guest";

// if (__________) {
//     echo "ログイン成功<br>";
// } else {
//     echo "ログイン失敗<br>";
// }

// 🔘 【選択肢】以下から適切なものを1つ選んで空欄に入れてください。
// A. $username === "admin"
// B. checkLogin($username)
// C. $username = checkLogin()
// D. checkLogin === $username

// ✅ 回答：___B___

// if (checkLogin($username)) {
//     echo "ログイン成功<br>";
// } else {
//     echo "ログイン失敗<br>";
// }



// 🧠 今回の問題の要点（理解ポイント）
// この問題で押さえておくべきポイントは以下の3点です：

// ⓵ 関数の戻り値（true/false）をそのまま条件分岐に使う
// if (checkLogin($username)) { ... }
// このように、「関数の戻り値（true または false）」を if 文の中で直接使うパターンは、PHPにおいて非常に一般的かつ実用的です。
// Laravelなどでも、こうした書き方は頻繁に登場します。


// ⓶ 関数の引数に変数を渡す構文の理解
// checkLogin($username)
// この部分は「$username の中身を引数として関数に渡す」という処理です。
// 引数に "guest" や "admin" のような文字列が入り、それに応じた戻り値（true/false）が返されます。


// ⓷ 誤選択肢との違いを明確にする
// A. $username === "admin"
// 条件そのものは正しいですが、「関数を使う」という問題の主旨に沿っていないため不正解。

// C. $username = checkLogin()
// 「checkLogin に引数がない」ため エラー。しかも $username に上書きしてしまうのも不適切。

// D. checkLogin === $username
// checkLogin は関数名（≠ 値）なので、こうした比較は構文エラーになります。

// 🔁 この形式はどこでよく使われる？
// Laravelや実務の中では、
// 認証チェック
// フォームバリデーション
// ロジックの条件分岐
// などで、if (関数名(引数)) という形は頻出です。



//  ☕ PHPコーヒー 第13問（テーマ：戻り値の if 判定 × 表示メッセージ）
//  🎯 【穴埋め問題】

//  この関数 isDiscountApplicable は、価格が 3000 円以上であれば true を返します。
//  呼び出し側で戻り値を変数に代入し、その結果に応じてメッセージを表示します。

// function isDiscountApplicable($price)
// {
//     return $price >= 3000;
// }

//  価格を指定
// $productPrice = 2800;

//  戻り値を受け取り変数に代入（💡①）
// $result = isDiscountApplicable($productPrice);

//  結果に応じてメッセージを表示（💡②）
// if ($result) {
//     echo "割引対象です<br>";
// } else {
//     echo "割引対象外です<br>";
// }

// 🎯 【問題】
// 💡①の空欄を埋めてください。
// 戻り値を受け取り、$result に代入する1行を完成させてください。

// ✅ 回答：isDiscountApplicable($productPrice);


// 採点とポイント解説
// 📝 なぜ $price ではなく $productPrice？

// ✅ ：isDiscountApplicable($price)
// この記述のままだと、これは「関数定義内の引数名」です。
// 実際の呼び出し時には、「その時点で使っている変数名（＝$productPrice）」 を渡す必要があります。
// 🔁 $price は定義上のダミー引数。呼び出し時は $productPrice を渡す！
// この違いをしっかり理解できていれば、関数の引数ミスを減らせます。

// 🧩 応用シーンの例
// こうした判定処理は、以下のような実務にも応用できます：
// クーポン適用条件
// 送料無料ラインの判断
// 会員ステータスによる制御



// ☕ PHPコーヒー 第14問（テーマ：関数 × 戻り値 × 論理値の活用）
// 🎯 【選択肢問題】

// この関数 isValidScore は、スコア（点数）が 0〜100 の範囲内かどうかを判定します。
// 範囲内なら true、それ以外は false を返します。

// function isValidScore($score)
// {
//     return $score >= 0 && $score <= 100;
// }

// // 🎯 【問題】
// // 変数 $userScore に -5 が代入されているとき、次の if 文の評価結果は？
// // 表示されるメッセージはどちらですか？

// $userScore = -5;

// if (isValidScore($userScore)) {
//     echo "有効なスコアです<br>";
// } else {
//     echo "無効なスコアです<br>";
// }

// 🔘 【選択肢】
// A. 有効なスコアです<br>
// B. 無効なスコアです<br>
// C. エラーが発生する
// D. 何も表示されない

// ✅ 回答：____B____


// 🧠 今回のポイント解説
// 🔹 関数の役割をおさらい
// function isValidScore($score) {
//     return $score >= 0 && $score <= 100;
// }
// この関数は、「0〜100の範囲に入っていれば true、それ以外なら false」を返す典型的なバリデーション関数です。

// 🔹 今回の評価対象
// $userScore = -5;
// if (isValidScore($userScore)) {
//     echo "有効なスコアです<br>";
// } else {
//     echo "無効なスコアです<br>";
// }
// $userScore は -5 → 範囲外（0未満）

// よって isValidScore($userScore) は false を返す
// else 側が実行される
// 👉 表示結果は：
// 無効なスコアです<br>
// 正解！！

// 🧩 この問題の実務的な意味
// こうした関数は、フォームバリデーションやAPIの入力チェックなどで日常的に使用されるものです。
// 例：
// 年齢（0〜120）
// 点数（0〜100）
// 割引率（0〜100）
// このような「範囲チェック」は、早期の異常検出やバグ防止にとても重要です。

// 🧭 補足Tips：エラーにならない理由
// 選択肢C（「エラーが発生する」）が不正解である理由は：
// -5 は数値として有効（PHPではマイナス値でもOK）
// 条件式自体に構文ミスなし


// ☕ PHPコーヒー 第15問（テーマ：関数 × if文での否定判定）
// 🎯 【選択肢問題】

// この関数 isEven は、与えられた数値が偶数であれば true、奇数であれば false を返します。

// function isEven($number)
// {
//     return $number % 2 === 0;
// }

// 🎯 【問題】
// 次のコードを実行すると、画面にはどのメッセージが表示されますか？

// $input = 7;

// if (!isEven($input)) {
//     echo "奇数です<br>";
// } else {
//     echo "偶数です<br>";
// }

// 🔘 【選択肢】
// A. 奇数です<br>
// B. 偶数です<br>
// C. エラーが発生する
// D. 何も表示されない

// ✅ 回答：____A_____
// isEvenのままだと$input = 7なのでfalseになりelse判定になるが
// !によって反転させているので、偶数でない数が「true」になる。ので「A.奇数です<br>」が表示される。

// ✅ 採点結果：満点！正解 ◎

// 🧠 ポイント解説（今回の要点）
// 🔹 関数 isEven($number) の役割
// function isEven($number) {
//     return $number % 2 === 0;
// }
// 偶数なら true
// 奇数なら false

// 🔹 判定式の読み方：if (!isEven($input))
// $input = 7;
// isEven(7) → 7 % 2 === 0 → false
// !isEven(7) → !false → true
// したがって：
// if (true) {
//     echo "奇数です<br>";
// }
// 👉 表示されるのは 奇数です<br>

// ✅ 正解：A. 奇数です<br>


// KOHのこの解説：
// !によって反転させているので、偶数でない数が「true」になる。ので「A.奇数です<br>」が表示される。

// まさにその通りで、**「関数の戻り値に否定演算子をつける構文の読み解き」**が今回の学習ポイントです。

// 📌 補足ポイント：「否定」ロジックを正しく扱うには？
// 否定演算子 ! は初心者が混乱しやすい箇所でもあります。
// 以下のように 分岐を逆に読む習慣 が重要です：

// 判定式	            評価    	    結果
// isEven(7)	    false	        偶数ではない
// !isEven(7)	    true	        奇数である
// if (!isEven(7))	実行される	    「奇数です」表示

