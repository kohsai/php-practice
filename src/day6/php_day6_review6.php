<?php
// ☕ PHPコーヒー 第33問（テーマ：戻り値 × 否定 × 複数ネスト）
// 関数の戻り値に否定（!）を使い、2段以上ネストされた if 文の中で使うパターンです。

// ✅ 出題意図とテーマのねらい
// ・「関数が返す true/false を !で反転」させる場面の確認
// ・ネスト構造の中でも「どの条件が true で、どこが false か」の意識を持つ
// ・「否定」された値を if の判定に使うときの注意点

// 🔧【関数の定義】
// function isAdmin($userType)
// {
//     return $userType === "admin";
// }

// 🎯【問題】
// 次のコードを実行すると、画面にはどのメッセージが表示されますか？

// $userType = "guest"; // このままだとfalse判定。
// $accessLevel = 1;  // 0以上なのでtrueを返す。

// if ($accessLevel > 0) { // 0以上なのでtrueを返す。外側のif文の中に進む。
//     if (!isAdmin($userType)) { // ！falseとなりtrueのechoを表示。
//         echo "管理者ではありません<br>";
//     } else {
//         echo "管理者です<br>";
//     }
// } else {
//     echo "アクセスレベルが不足しています<br>";
// }

// 🔘 【選択肢】
// A. 管理者ではありません<br>
// B. 管理者です<br>
// C. アクセスレベルが不足しています<br>
// D. 何も表示されない

// この第33問の意図は、「外側の if（$accessLevel > 0）」が先に判定され、その中に「否定つき関数（!isAdmin）」が入っている構造に慣れることです。

// 回答：A.管理者ではありません<br>


// ✅ 採点：正解！
// 理解の観点からも、以下のポイントをしっかり押さえられています：

// 🔍 処理の流れと評価
// $accessLevel > 0 の判定
// $accessLevel = 1 → これは true
// よって、外側の if の中へ進みます。
// isAdmin($userType) の判定
// $userType = "guest" → "admin" === "guest" は false
// よって isAdmin($userType) は false を返します。
// !isAdmin($userType) の意味
// !false → true
// この中に入るので、表示されるのは：
// echo "管理者ではありません<br>";


// 🧠 ちょっと深掘りポイント（復習用）
// !関数名(...) は、関数の戻り値が true か false か を見極めたうえで、反転されることを頭に入れておきましょう。
// 特に if (!isXXX(...)) のような書き方は、否定の意味合いがコード上で曖昧になりやすいので、「true にしたいのか false にしたいのか」を落ち着いて整理するのがコツです。


// もしさらに精密さを加えるとしたら、以下のような書き方もできます：

// $userType = "guest"; // "admin" ではないので false を返す
// $accessLevel = 1;    // 0 より大きいため、外側の if 条件は成立する

// if ($accessLevel > 0) { // 外側の if 文：true なのでこの中に入る
// if (!isAdmin($userType)) { // isAdmin は false → !false = true なのでこちらに入る
//         echo "管理者ではありません<br>";
//     } else {
//         echo "管理者です<br>";
//     }
// } else {
//     echo "アクセスレベルが不足しています<br>";
// }



// ☕ PHPコーヒー 第34問（テーマ：戻り値 × 条件分岐 × 二重否定の回避）
// 「!関数()」の否定表現が重なって読みづらくならないよう、
// 処理の意図を明確に保ちながら条件を読み解く力を確認します。

// ✅ 出題意図とねらい
// ・「否定を多用すると、true/falseの混乱を招きやすい」ことを体験する
// ・コードの意図を正確に読み解く練習
// ・読みやすく書くための改善案も考えられるようになる

// 🔧【関数の定義】
// function isAvailable($status)
// {
//     return $status === "open";
// }

// 🎯【問題】
// 次のコードを実行すると、画面にはどのメッセージが表示されますか？

// $status = "closed"; // false
// $isLoggedIn = true;

// if ($isLoggedIn) {  // true
//     if (!isAvailable($status)) {  // !false → true
//         echo "利用できません<br>";
//     } else {
//         echo "利用可能です<br>";
//     }
// } else {
//     echo "ログインしてください<br>";
// }

// 🔘 【選択肢】
// A. 利用できません<br>
// B. 利用可能です<br>
// C. ログインしてください<br>
// D. 何も表示されない

// 今回のポイントは、「!isAvailable($status)」が true になる条件を見抜けるかどうかです。
// 処理の流れを一歩ずつ整理して、どのブロックに入るかを考えてみてください。

// 回答：A.利用できません<br>


// ✅ 採点：正解！
// 解説コメントもしっかりしており、「なぜこの分岐に入るのか」を一歩ずつ丁寧に言語化できています。
// 以下のように、処理の流れも完璧です：

// 🔍 処理の流れと論理チェック
// $isLoggedIn = true
// なので、外側の if ($isLoggedIn) は true → 中に進む。
// $status = "closed"
// 関数 isAvailable("closed") の結果は：
// return "closed" === "open"; // → false
// !isAvailable($status)
// !false → true なので、echo "利用できません<br>"; が実行される。

// 💡 コメントの評価
// // false
// // true
// // !false → true

// このように一つずつ評価していく書き方、読みやすくてとても良いです。
// 加えて、KOHのコメントは「外側・内側のどのifなのか」も明確になっており、将来の見直しにも強い構成です。

// 🧠 プチ復習：否定を減らして読みやすくする工夫
// 今回のように !isAvailable(...) のような否定条件があると読みにくくなることがあります。
// もしリーダビリティを高めるなら、以下のような方法もあります：

// if ($isLoggedIn) {
//     $available = isAvailable($status);
//     if ($available) {
//         echo "利用可能です<br>";
//     } else {
//         echo "利用できません<br>";
//     }
// }
// もしくは：

// if (!$isLoggedIn) {
//     echo "ログインしてください<br>";
// } elseif (!isAvailable($status)) {
//     echo "利用できません<br>";
// } else {
//     echo "利用可能です<br>";
// }
// 読みやすさや条件の見やすさも、実務ではとても大事な観点ですね。

// 🧠 否定を減らす＝「!（ビックリマーク）」を減らす
// ❓ なぜ否定（!）が多いと読みにくいのか？
// 否定の記号 ! は、処理の意味を一度反転させるため、脳内で一段階“変換”して考える必要があります。
// 例：
// if (!isAvailable($status)) {
// この行は、こう読まないといけません：
// 「この関数は true を返す時は “利用可能” 」
// でも ! が付いているから…
// 「じゃあ、利用できない時（＝falseのとき）に実行されるんだな…」
// → 読み手が**「関数の意味」と「!」の反転**を同時に処理する必要があり、負荷がかかるのです。

// ✅ 改善方法 ⓵：関数の結果を一旦変数に入れる
// if ($isLoggedIn) {
//     $available = isAvailable($status); // ← いったん分かりやすい名前で受け取る
//     if ($available) {
//         echo "利用可能です<br>";
//     } else {
//         echo "利用できません<br>";
//     }
// }
// ✔ ここが読みやすい理由：
// isAvailable() の結果が何かを明示的な変数名 $available に置き換えている
// if ($available) は肯定文なので読みやすい
// 「if 〜 else」の構造が自然な日本語の流れに近い

// ✅ 改善方法 ⓶：外側の if を否定パターンにして「早期リターン」

// if (!$isLoggedIn) {
//     echo "ログインしてください<br>";
// } elseif (!isAvailable($status)) {
//     echo "利用できません<br>";
// } else {
//     echo "利用可能です<br>";
// }
// ✔ ここが読みやすい理由：
// 早い段階で否定条件を処理してしまう（早期リターン）

// 先に「ログインしてないなら...」「利用できないなら...」と、条件を1つずつ順番に処理していくスタイル
// 最後に残った条件が「利用可能」という自然な流れ

// 🧾 実務でのポイント
// ! が連続すると、バグの温床やチーム内での誤読になりがちです。
// 関数名がすでに否定を含んでいる場合（例：isNotAvailable()）に ! をつけると 二重否定でさらに読みにくくなります。
// 「読みやすさ」は「動作するかどうか」と同じくらい重要です。後から読む人（未来の自分も含む）のためにコードを書く意識が実務では評価されます。



// ☕ PHPコーヒー 第35問（テーマ：戻り値 × 条件分岐 × ログインフロー）
// 関数でログイン状態を判定し、その戻り値を使って画面表示を切り替える基本的な構造です。

// ✅ 出題意図とねらい
// ・関数の戻り値を条件判定に使う処理を反復
// ・ログイン状態によって画面表示が変わる実践的なコードパターンに慣れる
// ・return true / false の処理の流れを明確に読む

// 🔍 今回のポイント
// 戻り値が true か false かをしっかり見極めることが重要です。
// また、$userId = null の意味と、!== null の評価に注目してください。

// 🔧【関数の定義】
// function isLoggedIn($userId)
// {
//     return $userId !== null; // null以外の場合にtrueを返す。
// }

// 🎯【問題】
// 次のコードを実行すると、画面にはどのメッセージが表示されますか？

// $userId = null; // nullなので falseを返す。
// $userName = "田中さん";

// if (isLoggedIn($userId)) { // falseに進む。「ログインしてください」が表示される。
//     echo "{$userName}、ようこそ！<br>";
// } else {
//     echo "ログインしてください<br>";
// }

// 🔘 【選択肢】
// A. 田中さん、ようこそ！<br>
// B. ログインしてください<br>
// C. エラーが発生する
// D. 何も表示されない

// 回答：B.ログインしてください<br>


// ✅ 採点：正解！💯
// KOHの解説コメントもとても的確で、ポイントとなる部分がすべて押さえられています。
// 特にこの記述：
// return $userId !== null; // null以外の場合にtrueを返す。
// $userId = null; // nullなので falseを返す。

// この2行だけで、今回のロジックの本質をしっかり表現できています。


// 🔍 処理の流れの再確認
// $userId = null
// → ユーザーIDが設定されていない＝ログインしていない状態

// 関数 isLoggedIn($userId)
// → return $userId !== null;
// → $userId が null なので、評価結果は false

// if (isLoggedIn($userId))
// → false のため、else ブロックへ

// 実行されるのは：
// echo "ログインしてください<br>";

// 💬 コメントの質について
// KOHのコメントは、今回も非常に明快・簡潔・論理的で、将来の復習時にも役立つ仕上がりです。
// 特に if の評価がどちらに進むかをしっかりコメントしている点が素晴らしいです。

// 🧠 補足Tips（復習用）
// PHPでは null は「値がないこと」を意味する特別な型で、ログイン状態の有無を判定するのによく使われます。
// !== null のように **「厳密比較（型も含めて判定）」**を使うのは、予期せぬ真偽の揺らぎを防ぐために実務でも重要な習慣です。



// ☕ PHPコーヒー 第36問（テーマ：関数の戻り値 × 条件分岐の流れ確認）
// 関数で状態を判定し、その戻り値に応じて処理を分ける基本パターンです。
// Laravelでもログイン状態や権限確認など、true/falseの戻り値を条件に使う場面が頻出します。

// ✅ 出題意図とねらい
// ・関数の中で true / false を返す処理の読み取りに慣れる
// ・戻り値を if 文で使う処理の流れを確認する
// ・「引数の値」によって戻り値がどう変わるかを丁寧に追う

// 🔧【関数の定義】
function hasPermission($role)
{
    if ($role === "admin") { // adminとすべて等しい時のみtrueを返す。
        return true;    // 「true」を返す。
    } else {
        return false;   // 「false」を返す。
    }
}

// 🎯【問題】
// 以下のコードを実行すると、画面にはどのメッセージが表示されますか？

$userRole = "editor";

if (hasPermission($userRole)) { // 「admin」以外なので「false」を返す。
    echo "アクセス許可<br>";
} else {
    echo "アクセス拒否<br>";    // falseを返すので「アクセス拒否」が表示される。
}

// 🔘【選択肢】
// A. アクセス許可<br>
// B. アクセス拒否<br>
// C. エラーが発生する
// D. 何も表示されない

// 回答：B.アクセス拒否<br>


// ✅ 採点結果：正解（B. アクセス拒否）
// 🧠 理由の確認：
// $userRole = "editor";
// このとき、hasPermission("editor") を呼び出します。
// function hasPermission($role)
// {
//     if ($role === "admin") {
//         return true;
//     } else {
//         return false;
//     }
// }
// $role === "admin" → "editor" なので false

// よって、戻り値は false

// そしてこの戻り値をそのまま if文 に使っています：
// if (hasPermission($userRole)) {
//     echo "アクセス許可<br>";
// } else {
//     echo "アクセス拒否<br>"; // ← ここが実行される！
// }

// 🔍 迷ったポイントへのフィードバック：
// 「false」は文字列ではなくphpの判定としての戻り値の「false」ですね。
// if文の中で、その戻り値をそのまま活用すればいいのか一瞬迷いました。

// この気づき、とても大切です。
// PHPでは、if (関数()) の中に true/falseの戻り値 をそのまま書いてよく、これはBoolean型で評価されるためです。

// if (true) → 条件成立
// if (false) → 条件不成立

// したがって、hasPermission() が false を返したら、そのまま else 側の処理に進むというのが、PHPで最もよく使われる構造のひとつです。


