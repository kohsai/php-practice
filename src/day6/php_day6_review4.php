<?php
// ☕ PHPコーヒー 第23問（テーマ：戻り値 × if文の応用）
// 🎯 【選択肢問題】

// 次の関数は、引数に渡されたユーザーの「年齢」が20歳以上かを判定し、
// true または false を返します。

// function isAdult($age)
// {
//     return $age >= 20;
// }

// 🎯 【問題】
// 以下のコードを実行すると、画面にはどのメッセージが表示されますか？

// $inputAge = 19;

// if (!isAdult($inputAge)) {
//     echo "未成年です<br>";
// } else {
//     echo "成人です<br>";
// }

// 🔘 【選択肢】
// A. 未成年です<br>
// B. 成人です<br>
// C. エラーが発生する
// D. 何も表示されない

// ✅ 回答：__A__（ここに記号を記入）
// ✍️ 補足や理由も書いてみましょう
// 通常であれば19歳は未成年であり、falseの判定になる。
// if文の中で、！で反転させているのでtrue判定になり、echo"未成年です<br>"となる。


// ✅ 正解：A. 未成年です<br>
// 🧠 解説：
// function isAdult($age) は、20歳以上なら true を返します。
// $inputAge = 19 のため、isAdult(19) は false。
// if (!isAdult($inputAge)) では !false となり、true。
// よって echo "未成年です<br>"; が実行されます。

// KOHの補足にあった「通常であれば19歳は未成年であり、falseの判定になる」「! で反転されて if の中が trueになる」という読みは完璧です。



// ☕ PHPコーヒー 第24問（テーマ：関数 × 論理演算子）
// 🎯【選択肢問題】
// 以下の関数は、与えられた年齢とステータスに応じて「入場可能かどうか」を判定します。

// function canEnter($age, $hasTicket)
// {
//     return $age >= 18 && $hasTicket === true;
// }

// 🎯【問題】
// 次のコードを実行すると、画面にはどのメッセージが表示されますか？

// $age = 17;
// $ticket = true;

// if (canEnter($age, $ticket)) {
//     echo "入場できます<br>";
// } else {
//     echo "入場できません<br>";
// }

// 🔘【選択肢】
// A. 入場できます<br>
// B. 入場できません<br>
// C. エラーが発生する
// D. 何も表示されない

// ✅ 回答：__B__（ここに記号を記入）
// ✍️ 補足や理由も書いてみましょう
// 入場可能の条件は18歳以上「かつ」チケットを持っている、というもの。
// チケットについては $ticket = true で条件を満たしているが
// $age = 17 で18歳以上ではないのでfalseとなり
// (false & true) なのでfalseとなり、"入場できません"となる。

// 回答：B → 正解です 💯！

// ✅ 正解：B. 入場できません<br>
// 🧠 解説：
// return $age >= 18 && $hasTicket === true;
// この論理式は 「年齢が18歳以上 かつ チケット所持」 の両方が true のときのみ true を返します。
// $age = 17 → 17 >= 18 → false
// $hasTicket = true → true === true → true
// → false && true → false
// したがって、if 文は false を受け取り、
// echo "入場できません<br>";
// が実行されます。


// ☕ PHPコーヒー 第25問（テーマ：関数の戻り値 × 否定の活用）
// 🎯【選択肢問題】
// 次の関数は、メールアドレスが「空でないかどうか」を判定します。

// function hasEmail($email)
// {
//     return $email !== "";
// }

// 🎯【問題】
// 以下のコードを実行すると、画面にはどのメッセージが表示されますか？

// $emailInput = "";

// if (!hasEmail($emailInput)) {
//     echo "メールアドレスが未入力です<br>";
// } else {
//     echo "メールアドレスが登録されています<br>";
// }

// 🔘【選択肢】
// A. メールアドレスが未入力です<br>
// B. メールアドレスが登録されています<br>
// C. エラーが発生する
// D. 何も表示されない

// ✅ 回答：__A__（ここに記号を記入）
// ✍️ 補足や理由も書いてみましょう
// まず、関数の定義で、メールアドレスが「空の場合のみ」、falseとなる。
// $emailInput = ""; の結果は、通常であれば if(hasEmail(false)となり、
// 「メールアドレスが登録されています」となるが、
// 「！」でif文の中身を反転させているので、true判定になり、
// 「メールアドレスが未入力です」が表示される。

// 第25問の採点結果は……正解です！🌟💯

// ✅ 正解：A. メールアドレスが未入力です<br>
// 🧠 解説：
// hasEmail($email) は「空でなければ true、空なら false」を返す関数です。
// $emailInput = "" なので、hasEmail("") は false を返す。
// if (!hasEmail($emailInput)) → !false → true
// よって echo "メールアドレスが未入力です<br>"; が実行される。
// 補足の中の「関数の定義で false になる条件」「if文での否定による反転」など、すべて的確に読み取れていますね。



// ☕ PHPコーヒー 第26問（テーマ：戻り値の型と厳密比較）
// 🎯【選択肢問題】
// 次の関数は、在庫数が0でないかを判定し、true または false を返します。

// function hasStock($quantity)
// {
//     return $quantity !== 0;
// }

// 🎯【問題】
// 以下のコードを実行すると、画面にはどのメッセージが表示されますか？

// $stock = "0"; // 文字列としての0

// if (hasStock($stock)) {
//     echo "在庫あり<br>";
// } else {
//     echo "在庫なし<br>";
// }

// 🔘【選択肢】
// A. 在庫あり<br>
// B. 在庫なし<br>
// C. エラーが発生する
// D. 何も表示されない

// ✅ 回答：_A_
// ✍️ 補足や理由も書いてみましょう
// 迷いましたが、直感でAにします。
// 「!== 0」なので完全一致の数値の「0」以外はtrueになるかと考えます。
// phpの決まりとして文字列の「"0"」はfalseになる気がしたので、今回の問題はそこで混乱しています。


// 今回の 第26問の採点結果は……正解です ✅ A. 在庫あり<br>！
// 🧠 解説：

// function hasStock($quantity) {
//     return $quantity !== 0;
// }
// ここで使われている !== は「値も型も異なるかどうか」を判定する 厳密比較 です。

// $stock = "0" は「文字列としての 0」
// 0 は「数値としての 0」
// "0" !== 0  // → true（型が違う）
// つまり、hasStock("0") は true を返します。

// → その結果 if (true) となり、
// echo "在庫あり<br>"; が実行される、というわけです。

// 💡 ワンポイント補足：
// PHPにおいて "0" は「文字列の '0' である限り、厳密には false ではない」という微妙な仕様があります。

// if ("0") のような if文の中の評価では、値は暗黙的に「真か偽か」に変換されます。
// ここで "0" は false（PHP独自仕様）。
// !== は 比較演算子なので、型・値を厳密に比較します。
// "0" と 0 は 型が違うため true。
// ✅ 重要なのは「どう使われるかによって評価方法が違う」という点です
// つまり、
// if ("0") で false になるのは、if文が真偽値として評価しているから
// "0" !== 0 が true になるのは、比較演算子が型まで見ているから



// // ☕ PHPコーヒー 第27問（テーマ：関数の戻り値 × if文のネスト）

// // 🎯【この問題で定着させたいポイント】
// // if 文の中で 関数の戻り値を複合条件（&&）と組み合わせて使う書き方
// // isAdult($age) の戻り値が true になる条件を把握する
// // ネストされた構造でも、一つずつ評価すれば難しくないことを体験する


// // 🎯【選択肢問題】
// // 関数 isAdult は、引数 age が20歳以上なら true を返します。

// function isAdult($age)
// {
//     return $age >= 20;
// }

// // 🎯【問題】
// // 次のコードを実行すると、画面にはどのメッセージが表示されますか？

// $age = 22;
// $country = "JP";

// if ($country === "JP" && isAdult($age)) {
//     echo "日本の成人です<br>";
// } else {
//     echo "成人ではありません<br>";
// }

// // 🔘【選択肢】
// // A. 日本の成人です<br>
// // B. 成人ではありません<br>
// // C. エラーが発生する
// // D. 何も表示されない

// // 回答：A
// // if文の条件のうち、まず年齢が二十歳以上かが判定され、かつ日本人であればtrueを返す。今回は両方の条件を満たすのでtrue判定になり、「日本の成人です」が表示される。

// 第27問の回答「A：日本の成人です」 は……

// ✅ 正解です！
// 🔍 解説：

// function isAdult($age)
// {
//     return $age >= 20;
// }
// この関数は、年齢が20歳以上なら true を返します。

// $age = 22;
// $country = "JP";

// if ($country === "JP" && isAdult($age)) {
//     echo "日本の成人です<br>";
// }
// $country === "JP" → true

// isAdult(22) → 22 >= 20 → true

// よって、true && true で if 文全体も true。
// 表示されるのは 日本の成人です<br> になります。



// ☕ PHPコーヒー 第28問（テーマ：戻り値 × 否定とネスト）
// 関数の戻り値 × 否定（!）と組み合わせたネスト判定
// 「ネストされた複合条件の中で !関数名() のような否定判定が使えるかを確認します」

// 🎯【選択肢問題】
// この関数 isBanned は、引数 status が "banned" の場合に true を返します。

// function isBanned($status)
// {
//     return $status === "banned";
// }

// // 🎯【問題】
// // 以下のコードを実行すると、画面にはどのメッセージが表示されますか？

// $status = "guest";
// $country = "JP";

// if ($country === "JP" && !isBanned($status)) {
//     echo "アクセス許可<br>";
// } else {
//     echo "アクセス拒否<br>";
// }

// 🔘【選択肢】
// A. アクセス許可<br>
// B. アクセス拒否<br>
// C. エラーが発生する
// D. 何も表示されない

// $status = "guest";
// $country = "JP";

// if ($country === "JP" && isBanned($status))であれば
// true & falseになるが、
// ！isBanned($status)で反転させているので、true $ true になり、
// 「A.アクセス許可<br>」となる。


// ✅ 正解です！
// 🧠 解説：
// 📌 関数の動作：
// function isBanned($status) {
//     return $status === "banned";
// }
// $status = "guest" のとき
// → isBanned("guest") は false を返す

// 📌 if 文の判定：
// if ($country === "JP" && !isBanned($status)) {
// $country === "JP" → true

// !isBanned($status) → !false → true

// ➡ true && true なので、条件式全体が true になります。

// 🖥 表示される結果：
// アクセス許可<br>
// ✅ 学習ポイント 再確認
// !（否定）は関数の戻り値にも使える

// ネストされた論理式でも、「一つずつ解いていく」ことで必ず理解できる

// 今回のような !関数名() の使い方は、ブラックリスト判定や除外条件でよく使われます
// 例：if (!isBanned($userStatus))

// KOHの以下の処理文：

// true & falseになるが、反転させて true & true になる
// → とても正確で、短絡評価や論理演算の理解も定着してきていることがよく分かります👏